{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","isValidUrl","label","placeholder","required","onChange","useState","Math","random","toFixed","slice","id","touched","setTouched","hasError","trim","hasUrlError","htmlFor","type","classNames","event","target","onBlur","urlCheck","url","test","NewMovie","onAdd","count","setCount","setTitle","setDescription","setImgUrl","setImdbUrl","setImdbId","isValidImgUrl","setIsValidImgUrl","isValidImdbUrl","setIsValidImdbUrl","newMovie","handleSubmit","isValid","onSubmit","newTitle","newDescription","newImgUrl","handleImgUrl","newImdbUrl","handleImdbUrl","newImdbId","disabled","App","moviesFromServer","preparedMovies","setPreparedMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ffb72f23.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  isValidUrl?: boolean\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  isValidUrl = false,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange = () => {},\n}) => {\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n  const [touched, setTouched] = useState(false);\n\n  const hasError = touched && required && !value.trim();\n  const hasUrlError = touched && isValidUrl;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError || hasUrlError,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => setTouched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n\n      {hasUrlError && (\n        <p className=\"help is-danger\">URL is not correct</p>\n      )}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd: (movie: Movie) => void;\n};\n\nconst urlCheck = (url: string) => {\n  // eslint-disable-next-line max-len\n  const regex = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\n  return !regex.test(url.trim());\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  // Increase the count after successful form submission\n  // to reset touched status of all the `Field`s\n  const [count, setCount] = useState(0);\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [imgUrl, setImgUrl] = useState('');\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [imdbId, setImdbId] = useState('');\n  const [isValidImgUrl, setIsValidImgUrl] = useState(false);\n  const [isValidImdbUrl, setIsValidImdbUrl] = useState(false);\n\n  const newMovie: Movie = {\n    title,\n    description,\n    imgUrl,\n    imdbUrl,\n    imdbId,\n  };\n\n  const reset = () => {\n    setTitle('');\n    setDescription('');\n    setImgUrl('');\n    setImdbUrl('');\n    setImdbId('');\n  };\n\n  const handleSubmit = () => {\n    onAdd(newMovie);\n    setCount(count + 1);\n    reset();\n  };\n\n  const handleImgUrl = (newImgUrl: string) => {\n    setImgUrl(newImgUrl);\n    setIsValidImgUrl(urlCheck(newImgUrl));\n  };\n\n  const handleImdbUrl = (newImdbUrl: string) => {\n    setImdbUrl(newImdbUrl);\n    setIsValidImdbUrl(urlCheck(newImdbUrl));\n  };\n\n  const isValid = !(\n    title.trim()\n    && imgUrl.trim()\n    && imdbUrl.trim()\n    && imdbId.trim()\n    && !isValidImdbUrl\n    && !isValidImgUrl\n  );\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={() => handleSubmit()}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={(newTitle) => setTitle(newTitle)}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={(newDescription) => setDescription(newDescription)}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        isValidUrl={isValidImgUrl}\n        onChange={(newImgUrl) => handleImgUrl(newImgUrl)}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        isValidUrl={isValidImdbUrl}\n        onChange={(newImdbUrl) => handleImdbUrl(newImdbUrl)}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={(newImdbId) => setImdbId(newImdbId)}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={isValid}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [preparedMovies, setPreparedMovies] = useState<Movie[]>(\n    moviesFromServer,\n  );\n\n  const handleAddMovie = (movie: Movie) => {\n    setPreparedMovies([...preparedMovies, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={preparedMovies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={handleAddMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}